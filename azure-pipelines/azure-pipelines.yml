trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - docs/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'fasttech-service-connection'
  containerRegistry: 'fasttechregistry.azurecr.io'
  imageRepository: 'fasttech-frontend'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  resourceGroup: 'rg-fasttech-foods'
  containerAppName: 'ca-fasttech-frontend'
  containerAppEnvironment: 'cae-fasttech-foods'

stages:
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push'
    steps:
    - task: Docker@2
      displayName: 'Build and push Docker image'
      inputs:
        containerRegistry: 'fasttech-acr-connection'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: 'Deploy to Container Apps'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployToContainerApps
    displayName: 'Deploy to Azure Container Apps'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Deploy to Azure Container Apps'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Check if Container App Environment exists
                if ! az containerapp env show --name $(containerAppEnvironment) --resource-group $(resourceGroup) &> /dev/null; then
                  echo "Creating Container App Environment..."
                  az containerapp env create \
                    --name $(containerAppEnvironment) \
                    --resource-group $(resourceGroup) \
                    --location eastus2
                fi

                # Check if Container App exists
                if az containerapp show --name $(containerAppName) --resource-group $(resourceGroup) &> /dev/null; then
                  echo "Updating existing Container App..."
                  az containerapp update \
                    --name $(containerAppName) \
                    --resource-group $(resourceGroup) \
                    --image $(containerRegistry)/$(imageRepository):$(tag) \
                    --set-env-vars \
                      VITE_ORDER_API_BASE_URL="$(VITE_ORDER_API_BASE_URL)" \
                      VITE_MENU_API_BASE_URL="$(VITE_MENU_API_BASE_URL)" \
                      VITE_AUTH_API_BASE_URL="$(VITE_AUTH_API_BASE_URL)"
                else
                  echo "Creating new Container App..."
                  az containerapp create \
                    --name $(containerAppName) \
                    --resource-group $(resourceGroup) \
                    --environment $(containerAppEnvironment) \
                    --image $(containerRegistry)/$(imageRepository):$(tag) \
                    --target-port 80 \
                    --ingress external \
                    --min-replicas 1 \
                    --max-replicas 10 \
                    --cpu 0.5 \
                    --memory 1.0Gi \
                    --env-vars \
                      VITE_ORDER_API_BASE_URL="$(VITE_ORDER_API_BASE_URL)" \
                      VITE_MENU_API_BASE_URL="$(VITE_MENU_API_BASE_URL)" \
                      VITE_AUTH_API_BASE_URL="$(VITE_AUTH_API_BASE_URL)"
                fi

                # Get the application URL
                APP_URL=$(az containerapp show --name $(containerAppName) --resource-group $(resourceGroup) --query properties.configuration.ingress.fqdn -o tsv)
                echo "Application deployed at: https://$APP_URL"
                echo "##vso[task.setvariable variable=appUrl]https://$APP_URL"

          - task: PowerShell@2
            displayName: 'Health Check'
            inputs:
              targetType: 'inline'
              script: |
                $maxAttempts = 30
                $attempt = 0
                $url = "$(appUrl)"
                
                Write-Host "Performing health check on: $url"
                
                do {
                  $attempt++
                  try {
                    $response = Invoke-WebRequest -Uri $url -Method GET -TimeoutSec 30
                    if ($response.StatusCode -eq 200) {
                      Write-Host "✅ Health check passed! Application is healthy."
                      exit 0
                    }
                  } catch {
                    Write-Host "⏳ Attempt $attempt failed. Waiting 10 seconds..."
                    Start-Sleep -Seconds 10
                  }
                } while ($attempt -lt $maxAttempts)
                
                Write-Host "❌ Health check failed after $maxAttempts attempts."
                exit 1
